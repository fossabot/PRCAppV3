-- Function: audit.if_tablelog()

-- DROP FUNCTION audit.if_tablelog();


CREATE OR REPLACE FUNCTION rfq.if_equiment_design_before()
  RETURNS trigger AS
$BODY$
DECLARE
    v_error_text text;
    v_error_code int;
    v_fl_must_update_desc char(1);


BEGIN
    -- start without error!
    v_error_code = 0;
    v_fl_must_update_desc = 'N';

   --updates
    IF (TG_OP = 'UPDATE') THEN

        IF NEW.ds_equipment_design_code_alternate  IS DISTINCT FROM OLD.ds_equipment_design_code_alternate   OR
           NEW.cd_equipment_design_sub_category    IS DISTINCT FROM OLD.cd_equipment_design_sub_category     OR 
           NEW.nr_series                           IS DISTINCT FROM OLD.nr_series                            OR 
           NEW.ds_equipment_design                 IS DISTINCT FROM OLD.ds_equipment_design                  THEN
            v_fl_must_update_desc = 'Y';
        END IF;

        IF NEW.nr_series != OLD.nr_series THEN

            IF EXISTS (SELECT 1 
                         FROM "EQUIPMENT_DESIGN_SUB_CATEGORY" s, 
                              "EQUIPMENT_DESIGN_CATEGORY" c, 
                              "EQUIPMENT_DESIGN_TYPE" t
                        WHERE s.cd_equipment_design_sub_category = NEW.cd_equipment_design_sub_category
                          AND c.cd_equipment_design_category     = s.cd_equipment_design_category
                          AND t.cd_equipment_design_type         = c.cd_equipment_design_type
                          AND t.fl_auto_add_serial               = 'Y'
                      ) THEN


                    v_error_text = retDescTranslated('You cannot change Series because it is automatic generated by the system'::text, null::integer);
                    RAISE EXCEPTION '% (%)', v_error_text, 15648;
            END IF;

            IF EXISTS ( SELECT 1 
                          FROM "EQUIPMENT_DESIGN" 
                         WHERE cd_equipment_design             != NEW.cd_equipment_design 
                           AND nr_series                        = NEW.nr_series 
                           AND cd_equipment_design_sub_category = NEW.cd_equipment_design_sub_category
                      ) THEN

                    v_error_text = retDescTranslated('Series already in use.'::text, null::integer);
                    RAISE EXCEPTION '% (%)', v_error_text, 15648;

            END IF;

        END IF;

        IF NEW.dt_deactivated IS DISTINCT FROM OLD.dt_deactivated AND NEW.cd_equipment_design in (13242, 13277, 13295) THEN
            v_error_text = retDescTranslated('You are trying to reactivate items which had been banned. Please report directly to Brandons office.'::text, null::integer);
            RAISE EXCEPTION '% (%)', v_error_text, 15648;
        END IF;


    --delete
    ELSIF (TG_OP = 'DELETE') THEN



    --insert
    ELSIF (TG_OP = 'INSERT') THEN

        IF NEW.cd_system_product_category IS NULL THEN
            NEW.cd_system_product_category = get_var('cd_system_product_category');
        END IF;

        v_fl_must_update_desc = 'Y';

        
        IF EXISTS (SELECT 1 
                     FROM "EQUIPMENT_DESIGN_SUB_CATEGORY" s, 
                          "EQUIPMENT_DESIGN_CATEGORY" c, 
                          "EQUIPMENT_DESIGN_TYPE" t
                    WHERE s.cd_equipment_design_sub_category = NEW.cd_equipment_design_sub_category
                      AND c.cd_equipment_design_category     = s.cd_equipment_design_category
                      AND t.cd_equipment_design_type         = c.cd_equipment_design_type
                      AND t.fl_auto_add_serial               = 'Y'
                  ) THEN

            UPDATE "EQUIPMENT_DESIGN_SUB_CATEGORY" SET nr_serial_for_auto = nr_serial_for_auto + 1 WHERE cd_equipment_design_sub_category = NEW.cd_equipment_design_sub_category;

            SELECT nr_serial_for_auto INTO NEW.nr_series FROM "EQUIPMENT_DESIGN_SUB_CATEGORY" WHERE cd_equipment_design_sub_category = NEW.cd_equipment_design_sub_category;

        END IF;

        IF EXISTS ( SELECT 1 
                        FROM "EQUIPMENT_DESIGN" 
                       WHERE cd_equipment_design             != NEW.cd_equipment_design 
                         AND nr_series                        = NEW.nr_series 
                         AND cd_equipment_design_sub_category = NEW.cd_equipment_design_sub_category
                    ) THEN

            v_error_text = retDescTranslated('Series already in use.'::text, null::integer);
            RAISE EXCEPTION '% (%)', v_error_text, 15648;

        END IF;
 


    ELSE
        RAISE EXCEPTION 'Trigger func added as trigger for unhandled case: %, %',TG_OP, TG_LEVEL;
        RETURN NULL;
    END IF;


   --updates ou insert
    IF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
        
        IF v_fl_must_update_desc = 'Y' THEN

            SELECT COALESCE( NEW.ds_equipment_design_code_alternate ,COALESCE(a.ds_name_code, '') || COALESCE(b.ds_name_code, '') || COALESCE(c.ds_name_code, '') || COALESCE(a.ds_name_separator, '') || rtrim(ltrim((CASE WHEN a.fl_add_zero_left = 'Y' THEN to_char(NEW.nr_series, '000') ELSE NEW.nr_series::text END)   )))
               INTO NEW.ds_equipment_code_full  
               FROM "EQUIPMENT_DESIGN_TYPE" a, "EQUIPMENT_DESIGN_CATEGORY" b, "EQUIPMENT_DESIGN_SUB_CATEGORY" c
              WHERE c.cd_equipment_design_sub_category = NEW.cd_equipment_design_sub_category 
                AND  b.cd_equipment_design_category     = c.cd_equipment_design_category
                AND  a.cd_equipment_design_type         = b.cd_equipment_design_type;

            NEW.ds_equipment_description_full = NEW.ds_equipment_code_full || ' ' || NEW.ds_equipment_design;

        END IF;




    END IF;




    -- controle de erro!!!!
    IF v_error_code > 0 THEN

        SELECT getTriggerError (v_error_code, null)
          INTO v_error_text;

        RAISE EXCEPTION '% (%)', v_error_text, v_error_code;
    END IF;


  -- Retorna OK
  IF TG_OP = 'DELETE' THEN 
    RETURN OLD;
  ELSE
    RETURN NEW;
   END IF;
END;
$BODY$

  LANGUAGE plpgsql VOLATILE SECURITY DEFINER
  COST 100;
ALTER FUNCTION rfq.if_equiment_design_before() SET search_path=pg_catalog, public, spec, rfq, translation;

ALTER FUNCTION rfq.if_equiment_design_before() OWNER TO qasystems;



    CREATE TRIGGER t_if_equiment_design_before
      BEFORE UPDATE OR INSERT OR DELETE
      ON rfq."EQUIPMENT_DESIGN"
      FOR EACH ROW
      EXECUTE PROCEDURE rfq.if_equiment_design_before();

